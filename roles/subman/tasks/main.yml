---

- name: gather subman.cpu.cpu(s) fact
  raw: sudo -n subscription-manager facts --list | grep '^cpu.cpu(s):' | sed -n -e 's/^.*cpu.cpu(s):\s//p'
  register: subman_cpu_cpu
  ignore_errors: yes
  when: '"SubmanFacts_subman.cpu.cpu(s)" in facts_to_collect'

- name: add subman.cpu.cpu(s) to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_cpu_cpu['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.cpu.cpu(s)'

- name: gather subman.cpu.core(s)_per_socket fact
  raw: sudo -n subscription-manager facts --list | grep '^cpu.core(s)_per_socket:' | sed -n -e 's/^.*cpu.core(s)_per_socket:\s//p'
  register: subman_cpu_core_per_socket
  ignore_errors: yes
  when: '"SubmanFacts_subman.cpu.core(s)_per_socket" in facts_to_collect'

- name: add subman.cpu.core(s)_per_socket to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_cpu_core_per_socket['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.cpu.core(s)_per_socket'

- name: gather subman.cpu.cpu_socket(s) fact
  raw: sudo -n subscription-manager facts --list | grep '^cpu.cpu_socket(s):' | sed -n -e 's/^.*cpu.cpu_socket(s):\s//p'
  register: subman_cpu_cpu_socket
  ignore_errors: yes
  when: '"SubmanFacts_subman.cpu.cpu_socket(s)" in facts_to_collect'

- name: add subman.cpu.cpu_socket(s) to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_cpu_cpu_socket['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.cpu.cpu_socket(s)'

- name: gather subman.virt.host_type fact
  raw: sudo -n subscription-manager facts --list | grep '^virt.host_type:' | sed -n -e 's/^.*virt.host_type:\s//p'
  register: subman_virt_host_type
  ignore_errors: yes
  when: '"SubmanFacts_subman.virt.host_type" in facts_to_collect'

- name: add subman.virt.host_type to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_virt_host_type['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.virt.host_type'

- name: gather subman.virt.is_guest fact
  raw: sudo -n subscription-manager facts --list | grep '^virt.is_guest:' | sed -n -e 's/^.*virt.is_guest:\s//p'
  register: subman_virt_is_guest
  ignore_errors: yes
  when: '"SubmanFacts_subman.virt.is_guest" in facts_to_collect'

- name: add subman.virt.is_guest to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_virt_is_guest['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.virt.is_guest'

- name: gather subman.virt.uuid fact
  raw: sudo -n subscription-manager facts --list | grep '^virt.uuid:' | sed -n -e 's/^.*virt.uuid:\s//p'
  register: subman_virt_uuid
  ignore_errors: yes
  when: '"SubmanFacts_subman.virt.uuid" in facts_to_collect'

- name: add subman.virt.uuid to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_virt_uuid['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.virt.uuid'

- name: gather subman.has_facts_file fact
  raw: fact_count=$(ls /etc/rhsm/facts | grep .facts | wc -l); if [[ $fact_count > 0 ]]; then echo "Y"; else echo "N"; fi
  register: subman_has_facts_file
  ignore_errors: yes
  when: '"SubmanFacts_subman.has_facts_file" in facts_to_collect'

- name: add subman.has_facts_file to dictionary
  set_fact:
    subman: "{{ subman|default({}) | combine({ item: subman_has_facts_file['stdout_lines'][0] }) }}"
  with_items:
  - 'subman.has_facts_file'
