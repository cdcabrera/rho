---

- name: initialize virt_what dictionary
  set_fact:
    virt_what: "{{ virt_what|default({}) }}"

- name: set virt-what.type fact if virt-what not found
  set_fact: virt_what_type='N/A (virt-what not found)'
  when: '"virt-what.type" in facts_to_collect and not have_virt_what'

- name: execute virt-what
  raw: virt-what;echo $?
  register: virt_what_output
  ignore_errors: yes
  become: yes
  when: 'have_virt_what and "virt-what.type" in facts_to_collect'

- name: extract virt-what error code
  set_fact:
    virt_what_error: '{{ virt_what_output["stdout"].split("\r\n")[-1] | int }}'
  when: 'have_virt_what and "virt-what.type" in facts_to_collect'

- name: set virt-what.type fact to bare metal if virt-what errored
  set_fact:
    virt_what_type: "bare metal"
  when: 'have_virt_what and "virt-what.type" in facts_to_collect and (not virt_what_error|int  == 0)'

- name: set virt-what.type fact if virt-what ran successfully
  set_fact:
    virt_what_type: '{{ ";".join(virt_what_output["stdout_lines"][:-1]) }}'
  when: 'have_virt_what and "virt-what.type" in facts_to_collect and (virt_what_error|int == 0)'

- name: add virt-what.type to dictionary
  set_fact:
    virt_what: "{{ virt_what|default({}) | combine({ item: virt_what_type }) }}"
  with_items:
  - 'virt-what.type'
  when: '"virt-what.type" in facts_to_collect'
